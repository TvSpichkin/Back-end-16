import экспресс, {Request, Response} from "express";
import {МодельВидаЧастицы} from "./модели/МодельВидаЧастицы";
import {МодельЗапросаЧастиц} from "./модели/МодельЗапросаЧастиц";
import {МодельСозданияЧастицы} from "./модели/МодельСозданияЧастицы";
import {МодельОбновленияЧастицы} from "./модели/МодельОбновленияЧастицы";
import {МодельУИРПарамовИдЧастицы} from "./модели/МодельУИРПарамовИдЧастицы";
import {ЗапросСПарами, ЗапросСТелом, ЗапросСВопросом, ЗапросСПарамиИТелом} from "./типы";

type типЧастицы = {
    ид: number,
    название: string,
    количество: number
};

export const пр = экспресс(); // Определение экспресс приложения
const промежПОтелаЗОДС = экспресс.json(),
МП = "127.0.0.1", // Адрес межсетевого протокола (МП)
порт = 3e3, // Порт, прослушиваемый сервером
бд: {частицы: типЧастицы[]} = {
    частицы: [
        {ид: 1, название: "Электрон", количество: 10},
        {ид: 2, название: "Протон", количество: 10},
        {ид: 3, название: "Нейтрон", количество: 10},
        {ид: 4, название: "Фотон", количество: 10}
    ] // Задание массива частиц
}; // Объявление базы данных

пр.use(промежПОтелаЗОДС);

function провОшибокВводаЧаст(запр: Request<{}, {}, МодельСозданияЧастицы>, отв: Response): boolean {
    if(!запр.body.название || typeof запр.body.название !== "string" || !запр.body.название.replace(/ /g, "")) {
        отв.sendStatus(400);
        return true;
    }
    return false;
}

function бдВвид(бдЧаст: типЧастицы): МодельВидаЧастицы {
    return {
        ид: бдЧаст.ид,
        название: бдЧаст.название
    };
}


пр.get(encodeURI("/частицы"), (запр: ЗапросСВопросом<МодельЗапросаЧастиц>, отв: Response<МодельВидаЧастицы[]>) => {
    var найдЧаст = бд.частицы;
    //console.log("запр.query.название = " + запр.query.название);
    if(запр.query.название) найдЧаст = найдЧаст.filter(ч => ч.название.indexOf(запр.query.название) > -1);

    отв.json(найдЧаст.map(бдВвид));
});

пр.get(encodeURI("/частицы/:id"), (запр: ЗапросСПарами<МодельУИРПарамовИдЧастицы>, отв: Response<МодельВидаЧастицы>) => {
    const найдЧаст = бд.частицы.find(ч => ч.ид === +запр.params.id);

    if(!найдЧаст) {
        отв.sendStatus(404);
        return 404;
    }

    отв.json(бдВвид(найдЧаст));
});

пр.post(encodeURI("/частицы"), (запр: ЗапросСТелом<МодельСозданияЧастицы>, отв: Response<МодельВидаЧастицы>) => {
    if(провОшибокВводаЧаст(запр, отв)) return 400;

    const добЧаст = {
        ид: бд.частицы.length ? бд.частицы[бд.частицы.length - 1].ид + 1 : 1,
        название: запр.body.название,
        количество: 0
    };

    бд.частицы.push(добЧаст);

    отв.status(201).json(бдВвид(добЧаст));
});

пр.delete(encodeURI("/частицы/:id"), (запр: ЗапросСПарами<МодельУИРПарамовИдЧастицы>, отв: Response) => {
    const найдЧаст = бд.частицы.find(ч => ч.ид === +запр.params.id);

    if(!найдЧаст) {
        отв.sendStatus(404);
        return 404;
    }

    бд.частицы = бд.частицы.filter(ч => ч.ид !== +запр.params.id);

    отв.sendStatus(204);
});

пр.put(encodeURI("/частицы/:id"), (запр: ЗапросСПарамиИТелом<МодельУИРПарамовИдЧастицы, МодельОбновленияЧастицы>, отв: Response) => {
    if(провОшибокВводаЧаст(запр, отв)) return 400;

    const найдЧаст = бд.частицы.find(ч => ч.ид === +запр.params.id);

    if(!найдЧаст) {
        отв.sendStatus(404);
        return 404;
    }

    найдЧаст.название = запр.body.название;

    отв.sendStatus(204);
});

пр.delete(encodeURI("/__test__/данные"), (запр, отв) => {
    бд.частицы = [];

    отв.sendStatus(204);
});

пр.listen(порт, МП, () => {
    console.log("Сервер доступен по адресу " + МП + " и случшает порт " + порт);
});
